{"version":3,"file":"html5sortable.min.js","sources":["../src/data.ts","../src/filter.ts","../src/store.ts","../src/eventListener.ts","../src/attribute.ts","../src/offset.ts","../src/debounce.ts","../src/getIndex.ts","../src/isInDom.ts","../src/insertHtmlElements.ts","../src/serialize.ts","../src/makePlaceholder.ts","../src/elementHeight.ts","../src/elementWidth.ts","../src/getHandles.ts","../src/getEventTarget.ts","../src/setDragImage.ts","../src/isConnected.ts","../src/defaultConfiguration.ts","../src/hoverClass.ts","../src/html5sortable.ts","../src/throttle.ts"],"sourcesContent":["/**\r\n * Get or set data on element\r\n * @param {HTMLElement} element\r\n * @param {string} key\r\n * @param {any} value\r\n * @return {*}\r\n */\r\n\r\nfunction addData (element: HTMLElement, key: string, value?: any): HTMLElement|configuration|string|void {\r\n  if (value === undefined) {\r\n    return element && element.h5s && element.h5s.data && element.h5s.data[key]\r\n  } else {\r\n    element.h5s = element.h5s || {}\r\n    element.h5s.data = element.h5s.data || {}\r\n    element.h5s.data[key] = value\r\n  }\r\n}\r\n/**\r\n * Remove data from element\r\n * @param {HTMLElement} element\r\n */\r\nfunction removeData (element: HTMLElement) {\r\n  if (element.h5s) {\r\n    delete element.h5s.data\r\n  }\r\n}\r\n\r\nexport { addData, removeData }\r\n","/* eslint-env browser */\r\n/**\r\n * Filter only wanted nodes\r\n * @param {NodeList|HTMLCollection|Array} nodes\r\n * @param {String} selector\r\n * @returns {Array}\r\n */\r\nexport default (nodes: NodeList|HTMLCollection|Array<HTMLElement>, selector: string): Array<HTMLElement> => {\r\n  if (!(nodes instanceof NodeList || nodes instanceof HTMLCollection || nodes instanceof Array)) {\r\n    throw new Error('You must provide a nodeList/HTMLCollection/Array of elements to be filtered.')\r\n  }\r\n  if (typeof selector !== 'string') {\r\n    return Array.from(nodes)\r\n  }\r\n\r\n  return Array.from(nodes).filter((item) => item.nodeType === 1 && item.matches(selector))\r\n}\r\n","/* eslint-env browser */\r\n/* eslint-disable no-use-before-define */\r\nimport { Store as StoreInterface } from './types/store'\r\nexport const stores: Map<HTMLElement, Store> = new Map()\r\n/* eslint-enable no-use-before-define */\r\n/**\r\n * Stores data & configurations per Sortable\r\n * @param {Object} config\r\n */\r\nexport class Store implements StoreInterface {\r\n  private _config: Map<string, any> = new Map() // eslint-disable-line no-undef\r\n  private _placeholder?: HTMLElement = undefined // eslint-disable-line no-undef\r\n  private _data: Map<string, any> = new Map() // eslint-disable-line no-undef\r\n  /**\r\n   * set the configuration of a class instance\r\n   * @method config\r\n   * @param {object} config object of configurations\r\n   */\r\n  set config (config: configuration) {\r\n    if (typeof config !== 'object') {\r\n      throw new Error('You must provide a valid configuration object to the config setter.')\r\n    }\r\n    // combine config with default\r\n    const mergedConfig = Object.assign({}, config)\r\n    // add config to map\r\n    this._config = new Map(Object.entries(mergedConfig))\r\n  }\r\n  /**\r\n   * get the configuration map of a class instance\r\n   * @method config\r\n   * @return {object}\r\n   */\r\n\r\n  get config (): configuration {\r\n    // transform Map to object\r\n    const config = {}\r\n    this._config.forEach((value, key) => {\r\n      config[key] = value\r\n    })\r\n    // return object\r\n    return config\r\n  }\r\n\r\n  /**\r\n   * set individual configuration of a class instance\r\n   * @method setConfig\r\n   * @param  key valid configuration key\r\n   * @param  value any value\r\n   * @return void\r\n   */\r\n  setConfig (key: string, value: any): void {\r\n    if (!this._config.has(key)) {\r\n      throw new Error(`Trying to set invalid configuration item: ${key}`)\r\n    }\r\n    // set config\r\n    this._config.set(key, value)\r\n  }\r\n\r\n  /**\r\n   * get an individual configuration of a class instance\r\n   * @method getConfig\r\n   * @param  key valid configuration key\r\n   * @return any configuration value\r\n   */\r\n  getConfig (key: string): any {\r\n    if (!this._config.has(key)) {\r\n      throw new Error(`Invalid configuration item requested: ${key}`)\r\n    }\r\n    return this._config.get(key)\r\n  }\r\n\r\n  /**\r\n   * get the placeholder for a class instance\r\n   * @method placeholder\r\n   * @return {HTMLElement|null}\r\n   */\r\n  get placeholder (): HTMLElement {\r\n    return this._placeholder\r\n  }\r\n\r\n  /**\r\n   * set the placeholder for a class instance\r\n   * @method placeholder\r\n   * @param {HTMLElement} placeholder\r\n   * @return {void}\r\n   */\r\n  set placeholder (placeholder: HTMLElement) {\r\n    if (!(placeholder instanceof HTMLElement) && placeholder !== null) {\r\n      throw new Error('A placeholder must be an html element or null.')\r\n    }\r\n    this._placeholder = placeholder\r\n  }\r\n\r\n  /**\r\n   * set an data entry\r\n   * @method setData\r\n   * @param {string} key\r\n   * @param {any} value\r\n   * @return {void}\r\n   */\r\n  setData (key: string, value: Function): void {\r\n    if (typeof key !== 'string') {\r\n      throw new Error('The key must be a string.')\r\n    }\r\n    this._data.set(key, value)\r\n  }\r\n\r\n  /**\r\n   * get an data entry\r\n   * @method getData\r\n   * @param {string} key an existing key\r\n   * @return {any}\r\n   */\r\n  getData (key: string): any {\r\n    if (typeof key !== 'string') {\r\n      throw new Error('The key must be a string.')\r\n    }\r\n    return this._data.get(key)\r\n  }\r\n\r\n  /**\r\n   * delete an data entry\r\n   * @method deleteData\r\n   * @param {string} key an existing key\r\n   * @return {boolean}\r\n   */\r\n  deleteData (key: string): boolean {\r\n    if (typeof key !== 'string') {\r\n      throw new Error('The key must be a string.')\r\n    }\r\n    return this._data.delete(key)\r\n  }\r\n}\r\n/**\r\n * @param {HTMLElement} sortableElement\r\n * @returns {Class: Store}\r\n */\r\nexport default (sortableElement: HTMLElement): Store => {\r\n  // if sortableElement is wrong type\r\n  if (!(sortableElement instanceof HTMLElement)) {\r\n    throw new Error('Please provide a sortable to the store function.')\r\n  }\r\n  // create new instance if not avilable\r\n  if (!stores.has(sortableElement)) {\r\n    stores.set(sortableElement, new Store())\r\n  }\r\n  // return instance\r\n  return stores.get(sortableElement)\r\n}\r\n","import store from './store'\r\n/**\r\n * @param {Array|HTMLElement} element\r\n * @param {Function} callback\r\n * @param {string} event\r\n */\r\nfunction addEventListener (element: Array<HTMLElement>|HTMLElement, eventName:string, callback: () => void) {\r\n  if (element instanceof Array) {\r\n    for (let i = 0; i < element.length; ++i) {\r\n      addEventListener(element[i], eventName, callback)\r\n    }\r\n    return\r\n  }\r\n  element.addEventListener(eventName, callback)\r\n  store(element).setData(`event${eventName}`, callback)\r\n}\r\n/**\r\n * @param {Array<HTMLElement>|HTMLElement} element\r\n * @param {string} eventName\r\n */\r\nfunction removeEventListener (element: Array<HTMLElement>|HTMLElement, eventName: string) {\r\n  if (element instanceof Array) {\r\n    for (let i = 0; i < element.length; ++i) {\r\n      removeEventListener(element[i], eventName)\r\n    }\r\n    return\r\n  }\r\n  element.removeEventListener(eventName, store(element).getData(`event${eventName}`))\r\n  store(element).deleteData(`event${eventName}`)\r\n}\r\n\r\nexport { addEventListener, removeEventListener }\r\n","/**\r\n * @param {Array<HTMLElement>|HTMLElement} element\r\n * @param {string} attribute\r\n * @param {string} value\r\n */\r\nfunction addAttribute (element: Array<HTMLElement>|HTMLElement, attribute:string, value:string) {\r\n  if (element instanceof Array) {\r\n    for (let i = 0; i < element.length; ++i) {\r\n      addAttribute(element[i], attribute, value)\r\n    }\r\n    return\r\n  }\r\n  element.setAttribute(attribute, value)\r\n}\r\n/**\r\n * @param {Array|HTMLElement} element\r\n * @param {string} attribute\r\n */\r\nfunction removeAttribute (element: Array<HTMLElement>|HTMLElement, attribute:string) {\r\n  if (element instanceof Array) {\r\n    for (let i = 0; i < element.length; ++i) {\r\n      removeAttribute(element[i], attribute)\r\n    }\r\n    return\r\n  }\r\n  element.removeAttribute(attribute)\r\n}\r\n\r\nexport { addAttribute, removeAttribute }\r\n","/**\r\n * @param {HTMLElement} element\r\n * @returns {Object}\r\n */\r\nexport default (element: HTMLElement): offsetObject => {\r\n  if (!element.parentElement || element.getClientRects().length === 0) {\r\n    throw new Error('target element must be part of the dom')\r\n  }\r\n\r\n  const rect = element.getClientRects()[0]\r\n  return {\r\n    left: rect.left + window.pageXOffset,\r\n    right: rect.right + window.pageXOffset,\r\n    top: rect.top + window.pageYOffset,\r\n    bottom: rect.bottom + window.pageYOffset\r\n  }\r\n}\r\n","/**\r\n * Creates and returns a new debounced version of the passed function which will postpone its execution until after wait milliseconds have elapsed\r\n * @param {Function} func to debounce\r\n * @param {number} time to wait before calling function with latest arguments, 0 - no debounce\r\n * @returns {function} - debounced function\r\n */\r\nexport default (func: Function, wait: number = 0): Function => {\r\n  let timeout\r\n  return (...args) => {\r\n    clearTimeout(timeout)\r\n    timeout = setTimeout(() => {\r\n      func(...args)\r\n    }, wait)\r\n  }\r\n}\r\n","/* eslint-env browser */\r\n/**\r\n * Get position of the element relatively to its sibling elements\r\n * @param {HTMLElement} element\r\n * @returns {number}\r\n */\r\nexport default (element: HTMLElement, elementList: HTMLCollection | NodeList | Array<HTMLElement>): number => {\r\n  if (!(element instanceof HTMLElement) || !(elementList instanceof NodeList || elementList instanceof HTMLCollection || elementList instanceof Array)) {\r\n    throw new Error('You must provide an element and a list of elements.')\r\n  }\r\n\r\n  return Array.from(elementList).indexOf(element)\r\n}\r\n","/* eslint-env browser */\r\n/**\r\n * Test whether element is in DOM\r\n * @param {HTMLElement} element\r\n * @returns {boolean}\r\n */\r\nexport default (element: HTMLElement): boolean => {\r\n  if (!(element instanceof HTMLElement)) {\r\n    throw new Error('Element is not a node element.')\r\n  }\r\n\r\n  return element.parentNode !== null\r\n}\r\n","/* eslint-env browser */\r\n/**\r\n * Insert node before or after target\r\n * @param {HTMLElement} referenceNode - reference element\r\n * @param {HTMLElement} newElement - element to be inserted\r\n * @param {String} position - insert before or after reference element\r\n */\r\nconst insertNode = (referenceNode: HTMLElement, newElement: HTMLElement, position: String) => {\r\n  if (!(referenceNode instanceof HTMLElement) || !(referenceNode.parentElement instanceof HTMLElement)) {\r\n    throw new Error('target and element must be a node')\r\n  }\r\n  referenceNode.parentElement.insertBefore(\r\n    newElement,\r\n    (position === 'before' ? referenceNode : referenceNode.nextElementSibling)\r\n  )\r\n}\r\n/**\r\n * Insert before target\r\n * @param {HTMLElement} target\r\n * @param {HTMLElement} element\r\n */\r\nconst insertBefore = (target: HTMLElement, element: HTMLElement) => insertNode(target, element, 'before')\r\n/**\r\n * Insert after target\r\n * @param {HTMLElement} target\r\n * @param {HTMLElement} element\r\n */\r\nconst insertAfter = (target: HTMLElement, element: HTMLElement) => insertNode(target, element, 'after')\r\n\r\nexport { insertBefore, insertAfter }\r\n","/* eslint-env browser */\r\nimport { addData } from './data' // yuk, data really needs to be refactored\r\nimport filter from './filter'\r\nimport getIndex from './getIndex'\r\n/**\r\n * Filter only wanted nodes\r\n * @param {HTMLElement} sortableContainer\r\n * @param {Function} customSerializer\r\n * @returns {Array}\r\n */\r\nexport default (sortableContainer: HTMLElement, customItemSerializer: Function = (serializedItem: serializedItem, sortableContainer: HTMLElement) => serializedItem, customContainerSerializer: Function = (serializedContainer: object) => serializedContainer): object => {\r\n  // check for valid sortableContainer\r\n  if (!(sortableContainer instanceof HTMLElement) || !sortableContainer.isSortable === true) {\r\n    throw new Error('You need to provide a sortableContainer to be serialized.')\r\n  }\r\n  // check for valid serializers\r\n  if (typeof customItemSerializer !== 'function' || typeof customContainerSerializer !== 'function') {\r\n    throw new Error('You need to provide a valid serializer for items and the container.')\r\n  }\r\n  // get options\r\n  const options = addData(sortableContainer, 'opts')\r\n\r\n  const item: string|undefined = options.items\r\n\r\n  // serialize container\r\n  const items = filter(sortableContainer.children, item)\r\n  const serializedItems: serializedItem[] = items.map((item) => {\r\n    return {\r\n      parent: sortableContainer,\r\n      node: item,\r\n      html: item.outerHTML,\r\n      index: getIndex(item, items)\r\n    }\r\n  })\r\n  // serialize container\r\n  const container = {\r\n    node: sortableContainer,\r\n    itemCount: serializedItems.length\r\n  }\r\n\r\n  return {\r\n    container: customContainerSerializer(container),\r\n    items: serializedItems.map((item: object) => customItemSerializer(item, sortableContainer))\r\n  }\r\n}\r\n","/* eslint-env browser */\r\n/**\r\n * create a placeholder element\r\n * @param {HTMLElement} sortableElement a single sortable\r\n * @param {string|undefined} placeholder a string representing an html element\r\n * @param {string} placeholderClasses a string representing the classes that should be added to the placeholder\r\n */\r\nexport default (sortableElement: HTMLElement, placeholder?: HTMLElement, placeholderClass: string = 'sortable-placeholder') => {\r\n  if (!(sortableElement instanceof HTMLElement)) {\r\n    throw new Error('You must provide a valid element as a sortable.')\r\n  }\r\n  // if placeholder is not an element\r\n  if (!(placeholder instanceof HTMLElement) && placeholder !== undefined) {\r\n    throw new Error('You must provide a valid element as a placeholder or set ot to undefined.')\r\n  }\r\n  // if no placeholder element is given\r\n  if (placeholder === undefined) {\r\n    if (['UL', 'OL'].includes(sortableElement.tagName)) {\r\n      placeholder = document.createElement('li')\r\n    } else if (['TABLE', 'TBODY'].includes(sortableElement.tagName)) {\r\n      placeholder = document.createElement('tr')\r\n      // set colspan to always all rows, otherwise the item can only be dropped in first column\r\n      placeholder.innerHTML = '<td colspan=\"100\"></td>'\r\n    } else {\r\n      placeholder = document.createElement('div')\r\n    }\r\n  }\r\n  // add classes to placeholder\r\n  if (typeof placeholderClass === 'string') {\r\n    placeholder.classList.add(...placeholderClass.split(' '))\r\n  }\r\n\r\n  return placeholder\r\n}\r\n","/* eslint-env browser */\r\n/**\r\n * Get height of an element including padding\r\n * @param {HTMLElement} element an dom element\r\n */\r\nexport default (element: HTMLElement) => {\r\n  if (!(element instanceof HTMLElement)) {\r\n    throw new Error('You must provide a valid dom element')\r\n  }\r\n  // get calculated style of element\r\n  const style = window.getComputedStyle(element)\r\n  // get only height if element has box-sizing: border-box specified\r\n  if (style.getPropertyValue('box-sizing') === 'border-box') {\r\n    return parseInt(style.getPropertyValue('height'), 10)\r\n  }\r\n  // pick applicable properties, convert to int and reduce by adding\r\n  return ['height', 'padding-top', 'padding-bottom']\r\n    .map((key) => {\r\n      const int = parseInt(style.getPropertyValue(key), 10)\r\n      return isNaN(int) ? 0 : int\r\n    })\r\n    .reduce((sum, value) => sum + value)\r\n}\r\n","/* eslint-env browser */\r\n/**\r\n * Get width of an element including padding\r\n * @param {HTMLElement} element an dom element\r\n */\r\nexport default (element: HTMLElement) => {\r\n  if (!(element instanceof HTMLElement)) {\r\n    throw new Error('You must provide a valid dom element')\r\n  }\r\n  // get calculated style of element\r\n  const style = window.getComputedStyle(element)\r\n  // pick applicable properties, convert to int and reduce by adding\r\n  return ['width', 'padding-left', 'padding-right']\r\n    .map((key) => {\r\n      const int = parseInt(style.getPropertyValue(key), 10)\r\n      return isNaN(int) ? 0 : int\r\n    })\r\n    .reduce((sum, value) => sum + value)\r\n}\r\n","/* eslint-env browser */\r\n/**\r\n * get handle or return item\r\n * @param {Array<HTMLElement>} items\r\n * @param {string} selector\r\n */\r\n\r\nexport default (items: Array<HTMLElement>, selector: string): Array<HTMLElement> => {\r\n  if (!(items instanceof Array)) {\r\n    throw new Error('You must provide a Array of HTMLElements to be filtered.')\r\n  }\r\n\r\n  if (typeof selector !== 'string') {\r\n    return items\r\n  }\r\n\r\n  return items\r\n  // remove items without handle from array\r\n    .filter((item: HTMLElement) => {\r\n      return item.querySelector(selector) instanceof HTMLElement ||\r\n        (item.shadowRoot && item.shadowRoot.querySelector(selector) instanceof HTMLElement)\r\n    })\r\n    // replace item with handle in array\r\n    .map((item: HTMLElement) => {\r\n      return item.querySelector(selector) || (item.shadowRoot && item.shadowRoot.querySelector(selector))\r\n    })\r\n}\r\n","/**\r\n * @param {Event} event\r\n * @returns {HTMLElement}\r\n */\r\nexport default (event: Event): HTMLElement => {\r\n  return (event.composedPath && event.composedPath()[0]) || event.target\r\n}\r\n","/* eslint-env browser */\r\nimport offset from './offset'\r\nimport getEventTarget from './getEventTarget'\r\n/**\r\n * defaultDragImage returns the current item as dragged image\r\n * @param {HTMLElement} draggedElement - the item that the user drags\r\n * @param {object} elementOffset - an object with the offsets top, left, right & bottom\r\n * @param {Event} event - the original drag event object\r\n * @return {object} with element, posX and posY properties\r\n */\r\nconst defaultDragImage = (draggedElement: HTMLElement, elementOffset: offsetObject, event: DragEvent): object => {\r\n  return {\r\n    element: draggedElement,\r\n    posX: event.pageX - elementOffset.left,\r\n    posY: event.pageY - elementOffset.top\r\n  }\r\n}\r\n/**\r\n * attaches an element as the drag image to an event\r\n * @param {Event} event - the original drag event object\r\n * @param {HTMLElement} draggedElement - the item that the user drags\r\n * @param {Function} customDragImage - function to create a custom dragImage\r\n * @return void\r\n */\r\nexport default (event: DragEvent, draggedElement: HTMLElement, customDragImage: Function): void => {\r\n  // check if event is provided\r\n  if (!(event instanceof Event)) {\r\n    throw new Error('setDragImage requires a DragEvent as the first argument.')\r\n  }\r\n  // check if draggedElement is provided\r\n  if (!(draggedElement instanceof HTMLElement)) {\r\n    throw new Error('setDragImage requires the dragged element as the second argument.')\r\n  }\r\n  // set default function of none provided\r\n  if (!customDragImage) {\r\n    customDragImage = defaultDragImage\r\n  }\r\n  // check if setDragImage method is available\r\n  if (event.dataTransfer && event.dataTransfer.setDragImage) {\r\n    // get the elements offset\r\n    const elementOffset = offset(draggedElement)\r\n    // get the dragImage\r\n    const dragImage = customDragImage(draggedElement, elementOffset, event)\r\n    // check if custom function returns correct values\r\n    if (!(dragImage.element instanceof HTMLElement) || typeof dragImage.posX !== 'number' || typeof dragImage.posY !== 'number') {\r\n      throw new Error('The customDragImage function you provided must return and object with the properties element[string], posX[integer], posY[integer].')\r\n    }\r\n    // needs to be set for HTML5 drag & drop to work\r\n    event.dataTransfer.effectAllowed = 'copyMove'\r\n    // Firefox requires it to use the event target's id for the data\r\n    event.dataTransfer.setData('text/plain', getEventTarget(event).id)\r\n    // set the drag image on the event\r\n    event.dataTransfer.setDragImage(dragImage.element, dragImage.posX, dragImage.posY)\r\n  }\r\n}\r\n","import store from './store'\r\n/**\r\n * Check if curList accepts items from destList\r\n * @param {sortable} destination the container an item is move to\r\n * @param {sortable} origin the container an item comes from\r\n */\r\nexport default (destination: sortable, origin: sortable) => {\r\n  // check if valid sortable\r\n  if (destination.isSortable === true) {\r\n    const acceptFrom = store(destination).getConfig('acceptFrom')\r\n    // check if acceptFrom is valid\r\n    if (acceptFrom !== null && acceptFrom !== false && typeof acceptFrom !== 'string') {\r\n      throw new Error('HTML5Sortable: Wrong argument, \"acceptFrom\" must be \"null\", \"false\", or a valid selector string.')\r\n    }\r\n\r\n    if (acceptFrom !== null) {\r\n      return acceptFrom !== false && acceptFrom.split(',').filter(function (sel) {\r\n        return sel.length > 0 && origin.matches(sel)\r\n      }).length > 0\r\n    }\r\n    // drop in same list\r\n    if (destination === origin) {\r\n      return true\r\n    }\r\n    // check if lists are connected with connectWith\r\n    if (store(destination).getConfig('connectWith') !== undefined && store(destination).getConfig('connectWith') !== null) {\r\n      return store(destination).getConfig('connectWith') === store(origin).getConfig('connectWith')\r\n    }\r\n  }\r\n  return false\r\n}\r\n","/**\r\n * default configurations\r\n */\r\nexport default {\r\n  items: null,\r\n  // deprecated\r\n  connectWith: null,\r\n  // deprecated\r\n  disableIEFix: null,\r\n  acceptFrom: null,\r\n  copy: false,\r\n  placeholder: null,\r\n  placeholderClass: 'sortable-placeholder',\r\n  draggingClass: 'sortable-dragging',\r\n  hoverClass: false,\r\n  dropTargetContainerClass: false,\r\n  debounce: 0,\r\n  throttleTime: 100,\r\n  maxItems: 0,\r\n  itemSerializer: undefined,\r\n  containerSerializer: undefined,\r\n  customDragImage: null,\r\n  orientation: 'vertical'\r\n}\r\n","/* eslint-env browser */\r\nimport store from './store'\r\nimport filter from './filter'\r\nimport throttle from './throttle'\r\nimport { addEventListener, removeEventListener } from './eventListener'\r\n/**\r\n * enable or disable hoverClass on mouseenter/leave if container Items\r\n * @param {sortable} sortableContainer a valid sortableContainer\r\n * @param {boolean} enable enable or disable event\r\n */\r\nexport default (sortableContainer: sortable, enable: boolean) => {\r\n  if (typeof store(sortableContainer).getConfig('hoverClass') === 'string') {\r\n    const hoverClasses = store(sortableContainer).getConfig('hoverClass').split(' ')\r\n    // add class on hover\r\n    if (enable === true) {\r\n      addEventListener(sortableContainer, 'mousemove', throttle((event) => {\r\n        // check of no mouse button was pressed when mousemove started == no drag\r\n        if (event.buttons === 0) {\r\n          filter(sortableContainer.children, store(sortableContainer).getConfig('items')).forEach(item => {\r\n            if (item === event.target || item.contains(event.target)) {\r\n              item.classList.add(...hoverClasses)\r\n            } else {\r\n              item.classList.remove(...hoverClasses)\r\n            }\r\n          })\r\n        }\r\n      }, store(sortableContainer).getConfig('throttleTime')))\r\n      // remove class on leave\r\n      addEventListener(sortableContainer, 'mouseleave', () => {\r\n        filter(sortableContainer.children, store(sortableContainer).getConfig('items')).forEach(item => {\r\n          item.classList.remove(...hoverClasses)\r\n        })\r\n      })\r\n    // remove events\r\n    } else {\r\n      removeEventListener(sortableContainer, 'mousemove')\r\n      removeEventListener(sortableContainer, 'mouseleave')\r\n    }\r\n  }\r\n}\r\n","/* eslint-env browser */\r\n'use strict'\r\n\r\nimport { addData as data, removeData } from './data'\r\nimport filter from './filter'\r\nimport { addEventListener as on, removeEventListener as off } from './eventListener'\r\nimport { addAttribute as attr, removeAttribute as removeAttr } from './attribute'\r\nimport offset from './offset'\r\nimport debounce from './debounce'\r\nimport getIndex from './getIndex'\r\nimport isInDom from './isInDom'\r\nimport { insertBefore as before, insertAfter as after } from './insertHtmlElements'\r\nimport serialize from './serialize'\r\nimport makePlaceholder from './makePlaceholder'\r\nimport getElementHeight from './elementHeight'\r\nimport getElementWidth from './elementWidth'\r\nimport getHandles from './getHandles'\r\nimport getEventTarget from './getEventTarget'\r\nimport setDragImage from './setDragImage'\r\nimport { default as store, stores } from './store' /* eslint-disable-line */\r\nimport listsConnected from './isConnected'\r\nimport defaultConfiguration from './defaultConfiguration'\r\nimport enableHoverClass from './hoverClass'\r\n\r\n/*\r\n * variables global to the plugin\r\n */\r\nlet dragging\r\nlet draggingHeight\r\nlet draggingWidth\r\n\r\n/*\r\n * Keeps track of the initialy selected list, where 'dragstart' event was triggered\r\n * It allows us to move the data in between individual Sortable List instances\r\n */\r\n\r\n// Origin List - data from before any item was changed\r\nlet originContainer\r\nlet originIndex\r\nlet originElementIndex\r\nlet originItemsBeforeUpdate\r\n\r\n// Previous Sortable Container - we dispatch as sortenter event when a\r\n// dragged item enters a sortableContainer for the first time\r\nlet previousContainer\r\n\r\n// Destination List - data from before any item was changed\r\nlet destinationItemsBeforeUpdate\r\n\r\n/**\r\n * remove event handlers from items\r\n * @param {Array|NodeList} items\r\n */\r\nconst removeItemEvents = function (items) {\r\n  off(items, 'dragstart')\r\n  off(items, 'dragend')\r\n  off(items, 'dragover')\r\n  off(items, 'dragenter')\r\n  off(items, 'drop')\r\n  off(items, 'mouseenter')\r\n  off(items, 'mouseleave')\r\n}\r\n\r\n/**\r\n *\r\n * remove Store map values\r\n * @param {Array|NodeList} items\r\n */\r\nconst removeStoreData = function (items) {\r\n  if (items instanceof Array) {\r\n    items.forEach(element => stores.delete(element))\r\n  }\r\n}\r\n\r\n// Remove container events\r\nconst removeContainerEvents = function (originContainer, previousContainer) {\r\n  if (originContainer) {\r\n    off(originContainer, 'dragleave')\r\n  }\r\n  if (previousContainer && (previousContainer !== originContainer)) {\r\n    off(previousContainer, 'dragleave')\r\n  }\r\n}\r\n\r\n/**\r\n * getDragging returns the current element to drag or\r\n * a copy of the element.\r\n * Is Copy Active for sortable\r\n * @param {HTMLElement} draggedItem - the item that the user drags\r\n * @param {HTMLElement} sortable a single sortable\r\n */\r\nconst getDragging = function (draggedItem, sortable) {\r\n  let ditem = draggedItem\r\n  let allowDuplicates = this.allowDuplicates(sortable);\r\n  let dragItemExists = this.verifyDragItemExists(draggedItem, sortable);\r\n  debugger;\r\n  if (store(sortable).getConfig('copy') === true) {\r\n    ditem = draggedItem.cloneNode(true)\r\n    attr(ditem, 'aria-copied', 'true')\r\n    draggedItem.parentElement.appendChild(ditem)\r\n    ditem.style.display = 'none'\r\n    ditem.oldDisplay = draggedItem.style.display\r\n  }\r\n  return ditem\r\n}\r\n\r\nconst allowDuplicates = function (sortable) {\r\n  return store(sortable).getConfig('allowDuplicate') === true;\r\n}\r\n\r\nconst verifyDragItemExists = function (draggedItem, sortable) {\r\n  \r\n}\r\n\r\n\r\n/**\r\n * Remove data from sortable\r\n * @param {HTMLElement} sortable a single sortable\r\n */\r\nconst removeSortableData = function (sortable) {\r\n  removeData(sortable)\r\n  removeAttr(sortable, 'aria-dropeffect')\r\n}\r\n/**\r\n * Remove data from items\r\n * @param {Array<HTMLElement>|HTMLElement} items\r\n */\r\nconst removeItemData = function (items) {\r\n  removeAttr(items, 'aria-grabbed')\r\n  removeAttr(items, 'aria-copied')\r\n  removeAttr(items, 'draggable')\r\n  removeAttr(items, 'role')\r\n}\r\n/**\r\n * find sortable from element. travels up parent element until found or null.\r\n * @param {HTMLElement} element a single sortable\r\n * @param {Event} event - the current event. We need to pass it to be able to\r\n * find Sortable whith shadowRoot (document fragment has no parent)\r\n */\r\nfunction findSortable (element, event) {\r\n  if (event.composedPath) {\r\n    return event.composedPath().find(el => el.isSortable)\r\n  }\r\n  while (element.isSortable !== true) {\r\n    element = element.parentElement\r\n  }\r\n  return element\r\n}\r\n/**\r\n * Dragging event is on the sortable element. finds the top child that\r\n * contains the element.\r\n * @param {HTMLElement} sortableElement a single sortable\r\n * @param {HTMLElement} element is that being dragged\r\n */\r\nfunction findDragElement (sortableElement, element) {\r\n  const options = data(sortableElement, 'opts')\r\n  const items = filter(sortableElement.children, options.items)\r\n  const itemlist = items.filter(function (ele) {\r\n    return ele.contains(element) || (ele.shadowRoot && ele.shadowRoot.contains(element))\r\n  })\r\n\r\n  return itemlist.length > 0 ? itemlist[0] : element\r\n}\r\n/**\r\n * Destroy the sortable\r\n * @param {HTMLElement} sortableElement a single sortable\r\n */\r\nconst destroySortable = function (sortableElement) {\r\n  const opts = data(sortableElement, 'opts') || {}\r\n  const items = filter(sortableElement.children, opts.items)\r\n  const handles = getHandles(items, opts.handle)\r\n  // disable adding hover class\r\n  enableHoverClass(sortableElement, false)\r\n  // remove event handlers & data from sortable\r\n  off(sortableElement, 'dragover')\r\n  off(sortableElement, 'dragenter')\r\n  off(sortableElement, 'dragstart')\r\n  off(sortableElement, 'dragend')\r\n  off(sortableElement, 'drop')\r\n  // remove event data from sortable\r\n  removeSortableData(sortableElement)\r\n  // remove event handlers & data from items\r\n  off(handles, 'mousedown')\r\n  removeItemEvents(items)\r\n  removeItemData(items)\r\n  removeStoreData(items)\r\n  removeStoreData([sortableElement])\r\n  removeContainerEvents(originContainer, previousContainer)\r\n  // clear sortable flag\r\n  sortableElement.isSortable = false\r\n}\r\n/**\r\n * Enable the sortable\r\n * @param {HTMLElement} sortableElement a single sortable\r\n */\r\nconst enableSortable = function (sortableElement) {\r\n  const opts = data(sortableElement, 'opts')\r\n  const items = filter(sortableElement.children, opts.items)\r\n  const handles = getHandles(items, opts.handle)\r\n  attr(sortableElement, 'aria-dropeffect', 'move')\r\n  data(sortableElement, '_disabled', 'false')\r\n  attr(handles, 'draggable', 'true')\r\n  // enable hover class\r\n  enableHoverClass(sortableElement, true)\r\n  // @todo: remove this fix\r\n  // IE FIX for ghost\r\n  // can be disabled as it has the side effect that other events\r\n  // (e.g. click) will be ignored\r\n  if (opts.disableIEFix === false) {\r\n    const spanEl = (document || window.document).createElement('span')\r\n    if (typeof spanEl.dragDrop === 'function') {\r\n      on(handles, 'mousedown', function () {\r\n        if (items.indexOf(this) !== -1) {\r\n          this.dragDrop()\r\n        } else {\r\n          let parent = this.parentElement\r\n          while (items.indexOf(parent) === -1) {\r\n            parent = parent.parentElement\r\n          }\r\n          parent.dragDrop()\r\n        }\r\n      })\r\n    }\r\n  }\r\n}\r\n/**\r\n * Disable the sortable\r\n * @param {HTMLElement} sortableElement a single sortable\r\n */\r\nconst disableSortable = function (sortableElement) {\r\n  const opts = data(sortableElement, 'opts')\r\n  const items = filter(sortableElement.children, opts.items)\r\n  const handles = getHandles(items, opts.handle)\r\n  attr(sortableElement, 'aria-dropeffect', 'none')\r\n  data(sortableElement, '_disabled', 'true')\r\n  attr(handles, 'draggable', 'false')\r\n  off(handles, 'mousedown')\r\n  enableHoverClass(sortableElement, false)\r\n}\r\n/**\r\n * Reload the sortable\r\n * @param {HTMLElement} sortableElement a single sortable\r\n * @description events need to be removed to not be double bound\r\n */\r\nconst reloadSortable = function (sortableElement) {\r\n  const opts = data(sortableElement, 'opts')\r\n  const items = filter(sortableElement.children, opts.items)\r\n  const handles = getHandles(items, opts.handle)\r\n  data(sortableElement, '_disabled', 'false')\r\n  // remove event handlers from items\r\n  removeItemEvents(items)\r\n  removeContainerEvents(originContainer, previousContainer)\r\n  off(handles, 'mousedown')\r\n  // remove event handlers from sortable\r\n  off(sortableElement, 'dragover')\r\n  off(sortableElement, 'dragenter')\r\n  off(sortableElement, 'drop')\r\n}\r\n\r\n/**\r\n * Public sortable object\r\n * @param {Array|NodeList} sortableElements\r\n * @param {object|string} options|method\r\n */\r\nexport default function sortable (sortableElements, options: configuration|object|string|undefined): sortable {\r\n  // get method string to see if a method is called\r\n  const method = String(options)\r\n  options = options || {}\r\n  // check if the user provided a selector instead of an element\r\n  if (typeof sortableElements === 'string') {\r\n    sortableElements = document.querySelectorAll(sortableElements)\r\n  }\r\n  // if the user provided an element, return it in an array to keep the return value consistant\r\n  if (sortableElements instanceof HTMLElement) {\r\n    sortableElements = [sortableElements]\r\n  }\r\n\r\n  sortableElements = Array.prototype.slice.call(sortableElements)\r\n\r\n  if (/serialize/.test(method)) {\r\n    return sortableElements.map((sortableContainer) => {\r\n      const opts = data(sortableContainer, 'opts')\r\n      return serialize(sortableContainer, opts.itemSerializer, opts.containerSerializer)\r\n    })\r\n  }\r\n\r\n  sortableElements.forEach(function (sortableElement) {\r\n    if (/enable|disable|destroy/.test(method)) {\r\n      return sortable[method](sortableElement)\r\n    }\r\n    // log deprecation\r\n    ['connectWith', 'disableIEFix'].forEach((configKey) => {\r\n      if (Object.prototype.hasOwnProperty.call(options, configKey) && options[configKey] !== null) {\r\n        console.warn(`HTML5Sortable: You are using the deprecated configuration \"${configKey}\". This will be removed in an upcoming version, make sure to migrate to the new options when updating.`)\r\n      }\r\n    })\r\n    // merge options with default options\r\n    options = Object.assign({}, defaultConfiguration, store(sortableElement).config, options)\r\n    // init data store for sortable\r\n    store(sortableElement).config = options\r\n    // set options on sortable\r\n    data(sortableElement, 'opts', options)\r\n    // property to define as sortable\r\n    sortableElement.isSortable = true\r\n    // reset sortable\r\n    reloadSortable(sortableElement)\r\n    // initialize\r\n    const listItems = filter(sortableElement.children, options.items)\r\n    // create element if user defined a placeholder element as a string\r\n    let customPlaceholder\r\n    if (options.placeholder !== null && options.placeholder !== undefined) {\r\n      const tempContainer = document.createElement(sortableElement.tagName)\r\n      if (options.placeholder instanceof HTMLElement) {\r\n        tempContainer.appendChild(options.placeholder)\r\n      } else {\r\n        tempContainer.innerHTML = options.placeholder\r\n      }\r\n      customPlaceholder = tempContainer.children[0]\r\n    }\r\n    // add placeholder\r\n    store(sortableElement).placeholder = makePlaceholder(sortableElement, customPlaceholder, options.placeholderClass)\r\n\r\n    data(sortableElement, 'items', options.items)\r\n\r\n    if (options.acceptFrom) {\r\n      data(sortableElement, 'acceptFrom', options.acceptFrom)\r\n    } else if (options.connectWith) {\r\n      data(sortableElement, 'connectWith', options.connectWith)\r\n    }\r\n\r\n    enableSortable(sortableElement)\r\n    attr(listItems, 'role', 'option')\r\n    attr(listItems, 'aria-grabbed', 'false')\r\n    /*\r\n     Handle drag events on draggable items\r\n     Handle is set at the sortableElement level as it will bubble up\r\n     from the item\r\n     */\r\n    on(sortableElement, 'dragstart', function (e) {\r\n      // ignore dragstart events\r\n      const target = getEventTarget(e)\r\n      if (target.isSortable === true) {\r\n        return\r\n      }\r\n      e.stopImmediatePropagation()\r\n\r\n      if ((options.handle && !target.matches(options.handle)) || target.getAttribute('draggable') === 'false') {\r\n        return\r\n      }\r\n\r\n      const sortableContainer = findSortable(target, e)\r\n      const dragItem = findDragElement(sortableContainer, target)\r\n\r\n      // grab values\r\n      originItemsBeforeUpdate = filter(sortableContainer.children, options.items)\r\n      originIndex = originItemsBeforeUpdate.indexOf(dragItem)\r\n      originElementIndex = getIndex(dragItem, sortableContainer.children)\r\n      originContainer = sortableContainer\r\n\r\n      // add transparent clone or other ghost to cursor\r\n      setDragImage(e, dragItem, options.customDragImage)\r\n      // cache selsection & add attr for dragging\r\n      draggingHeight = getElementHeight(dragItem)\r\n      draggingWidth = getElementWidth(dragItem)\r\n      dragItem.classList.add(options.draggingClass)\r\n      dragging = getDragging(dragItem, sortableContainer)\r\n      attr(dragging, 'aria-grabbed', 'true')\r\n\r\n      // dispatch sortstart event on each element in group\r\n      sortableContainer.dispatchEvent(new CustomEvent('sortstart', {\r\n        detail: {\r\n          origin: {\r\n            elementIndex: originElementIndex,\r\n            index: originIndex,\r\n            container: originContainer\r\n          },\r\n          item: dragging,\r\n          originalTarget: target\r\n        }\r\n      }))\r\n    })\r\n\r\n    /*\r\n     We are capturing targetSortable before modifications with 'dragenter' event\r\n    */\r\n    on(sortableElement, 'dragenter', (e) => {\r\n      const target = getEventTarget(e)\r\n      const sortableContainer = findSortable(target, e)\r\n\r\n      if (sortableContainer && sortableContainer !== previousContainer) {\r\n        destinationItemsBeforeUpdate = filter(sortableContainer.children, data(sortableContainer, 'items'))\r\n          .filter(item => item !== store(sortableElement).placeholder)\r\n\r\n        if (options.dropTargetContainerClass) {\r\n          sortableContainer.classList.add(options.dropTargetContainerClass)\r\n        }\r\n        sortableContainer.dispatchEvent(new CustomEvent('sortenter', {\r\n          detail: {\r\n            origin: {\r\n              elementIndex: originElementIndex,\r\n              index: originIndex,\r\n              container: originContainer\r\n            },\r\n            destination: {\r\n              container: sortableContainer,\r\n              itemsBeforeUpdate: destinationItemsBeforeUpdate\r\n            },\r\n            item: dragging,\r\n            originalTarget: target\r\n          }\r\n        }))\r\n\r\n        on(sortableContainer, 'dragleave', e => {\r\n          // TODO: rename outTarget to be more self-explanatory\r\n          // e.fromElement for very old browsers, similar to relatedTarget\r\n          const outTarget = e.relatedTarget || e.fromElement\r\n          if (!e.currentTarget.contains(outTarget)) {\r\n            if (options.dropTargetContainerClass) {\r\n              sortableContainer.classList.remove(options.dropTargetContainerClass)\r\n            }\r\n            sortableContainer.dispatchEvent(new CustomEvent('sortleave', {\r\n              detail: {\r\n                origin: {\r\n                  elementIndex: originElementIndex,\r\n                  index: originIndex,\r\n                  container: sortableContainer\r\n                },\r\n                item: dragging,\r\n                originalTarget: target\r\n              }\r\n            }))\r\n          }\r\n        })\r\n      }\r\n      previousContainer = sortableContainer\r\n    })\r\n\r\n    /*\r\n     * Dragend Event - https://developer.mozilla.org/en-US/docs/Web/Events/dragend\r\n     * Fires each time dragEvent end, or ESC pressed\r\n     * We are using it to clean up any draggable elements and placeholders\r\n     */\r\n    on(sortableElement, 'dragend', function (e) {\r\n      if (!dragging) {\r\n        return\r\n      }\r\n\r\n      dragging.classList.remove(options.draggingClass)\r\n      attr(dragging, 'aria-grabbed', 'false')\r\n\r\n      if (dragging.getAttribute('aria-copied') === 'true' && data(dragging, 'dropped') !== 'true') {\r\n        dragging.remove()\r\n      }\r\n      if (dragging.oldDisplay !== undefined) {\r\n        dragging.style.display = dragging.oldDisplay\r\n        delete dragging.oldDisplay\r\n      }\r\n      const visiblePlaceholder = Array.from(stores.values()).map(data => data.placeholder)\r\n        .filter(placeholder => placeholder instanceof HTMLElement)\r\n        .filter(isInDom)[0]\r\n\r\n      if (visiblePlaceholder) {\r\n        visiblePlaceholder.remove()\r\n      }\r\n\r\n      // dispatch sortstart event on each element in group\r\n      sortableElement.dispatchEvent(new CustomEvent('sortstop', {\r\n        detail: {\r\n          origin: {\r\n            elementIndex: originElementIndex,\r\n            index: originIndex,\r\n            container: originContainer\r\n          },\r\n          item: dragging\r\n        }\r\n      }))\r\n\r\n      previousContainer = null\r\n      dragging = null\r\n      draggingHeight = null\r\n      draggingWidth = null\r\n    })\r\n\r\n    /*\r\n     * Drop Event - https://developer.mozilla.org/en-US/docs/Web/Events/drop\r\n     * Fires when valid drop target area is hit\r\n     */\r\n    on(sortableElement, 'drop', function (e) {\r\n      if (!listsConnected(sortableElement, dragging.parentElement)) {\r\n        return\r\n      }\r\n      e.preventDefault()\r\n      e.stopPropagation()\r\n\r\n      data(dragging, 'dropped', 'true')\r\n      // get the one placeholder that is currently visible\r\n      const visiblePlaceholder = Array.from(stores.values()).map((data) => {\r\n        return data.placeholder\r\n      })\r\n        // filter only HTMLElements\r\n        .filter(placeholder => placeholder instanceof HTMLElement)\r\n        // only elements in DOM\r\n        .filter(isInDom)[0]\r\n      if (visiblePlaceholder) {\r\n        visiblePlaceholder.replaceWith(dragging)\r\n        // to avoid flickering restoring element display immediately after replacing placeholder\r\n        if (dragging.oldDisplay !== undefined) {\r\n          dragging.style.display = dragging.oldDisplay\r\n          delete dragging.oldDisplay\r\n        }\r\n      } else {\r\n        // set the dropped value to 'false' to delete copied dragging at the time of 'dragend'\r\n        data(dragging, 'dropped', 'false')\r\n        return\r\n      }\r\n      /*\r\n       * Fires Custom Event - 'sortstop'\r\n       */\r\n      sortableElement.dispatchEvent(new CustomEvent('sortstop', {\r\n        detail: {\r\n          origin: {\r\n            elementIndex: originElementIndex,\r\n            index: originIndex,\r\n            container: originContainer\r\n          },\r\n          item: dragging\r\n        }\r\n      }))\r\n\r\n      const placeholder = store(sortableElement).placeholder\r\n      const originItems = filter(originContainer.children, options.items)\r\n        .filter(item => item !== placeholder)\r\n      const destinationContainer = this.isSortable === true ? this : this.parentElement\r\n      const destinationItems = filter(destinationContainer.children, data(destinationContainer, 'items'))\r\n        .filter(item => item !== placeholder)\r\n      const destinationElementIndex = getIndex(dragging, Array.from(dragging.parentElement.children)\r\n        .filter(item => item !== placeholder))\r\n      const destinationIndex = getIndex(dragging, destinationItems)\r\n\r\n      if (options.dropTargetContainerClass) {\r\n        destinationContainer.classList.remove(options.dropTargetContainerClass)\r\n      }\r\n\r\n      /*\r\n       * When a list item changed container lists or index within a list\r\n       * Fires Custom Event - 'sortupdate'\r\n       */\r\n      if (originElementIndex !== destinationElementIndex || originContainer !== destinationContainer) {\r\n        sortableElement.dispatchEvent(new CustomEvent('sortupdate', {\r\n          detail: {\r\n            origin: {\r\n              elementIndex: originElementIndex,\r\n              index: originIndex,\r\n              container: originContainer,\r\n              itemsBeforeUpdate: originItemsBeforeUpdate,\r\n              items: originItems\r\n            },\r\n            destination: {\r\n              index: destinationIndex,\r\n              elementIndex: destinationElementIndex,\r\n              container: destinationContainer,\r\n              itemsBeforeUpdate: destinationItemsBeforeUpdate,\r\n              items: destinationItems\r\n            },\r\n            item: dragging\r\n          }\r\n        }))\r\n      }\r\n    })\r\n\r\n    const debouncedDragOverEnter = debounce((sortableElement, element, pageX, pageY) => {\r\n      if (!dragging) {\r\n        return\r\n      }\r\n\r\n      // set placeholder height if forcePlaceholderSize option is set\r\n      if (options.forcePlaceholderSize) {\r\n        store(sortableElement).placeholder.style.height = draggingHeight + 'px'\r\n        store(sortableElement).placeholder.style.width = draggingWidth + 'px'\r\n      }\r\n      // if element the draggedItem is dragged onto is within the array of all elements in list\r\n      // (not only items, but also disabled, etc.)\r\n      if (Array.from(sortableElement.children).indexOf(element) > -1) {\r\n        const thisHeight = getElementHeight(element)\r\n        const thisWidth = getElementWidth(element)\r\n        const placeholderIndex = getIndex(store(sortableElement).placeholder, element.parentElement.children)\r\n        const thisIndex = getIndex(element, element.parentElement.children)\r\n        // Check if `element` is bigger than the draggable. If it is, we have to define a dead zone to prevent flickering\r\n        if (thisHeight > draggingHeight || thisWidth > draggingWidth) {\r\n          // Dead zone?\r\n          const deadZoneVertical = thisHeight - draggingHeight\r\n          const deadZoneHorizontal = thisWidth - draggingWidth\r\n          const offsetTop = offset(element).top\r\n          const offsetLeft = offset(element).left\r\n          if (placeholderIndex < thisIndex &&\r\n              ((options.orientation === 'vertical' && pageY < offsetTop) ||\r\n                  (options.orientation === 'horizontal' && pageX < offsetLeft))) {\r\n            return\r\n          }\r\n          if (placeholderIndex > thisIndex &&\r\n              ((options.orientation === 'vertical' && pageY > offsetTop + thisHeight - deadZoneVertical) ||\r\n                  (options.orientation === 'horizontal' && pageX > offsetLeft + thisWidth - deadZoneHorizontal))) {\r\n            return\r\n          }\r\n        }\r\n\r\n        if (dragging.oldDisplay === undefined) {\r\n          dragging.oldDisplay = dragging.style.display\r\n        }\r\n\r\n        if (dragging.style.display !== 'none') {\r\n          dragging.style.display = 'none'\r\n        }\r\n        // To avoid flicker, determine where to position the placeholder\r\n        // based on where the mouse pointer is relative to the elements\r\n        // vertical center.\r\n        let placeAfter = false\r\n        try {\r\n          const elementMiddleVertical = offset(element).top + element.offsetHeight / 2\r\n          const elementMiddleHorizontal = offset(element).left + element.offsetWidth / 2\r\n          placeAfter = (options.orientation === 'vertical' && (pageY >= elementMiddleVertical)) ||\r\n              (options.orientation === 'horizontal' && (pageX >= elementMiddleHorizontal))\r\n        } catch (e) {\r\n          placeAfter = placeholderIndex < thisIndex\r\n        }\r\n\r\n        if (placeAfter) {\r\n          after(element, store(sortableElement).placeholder)\r\n        } else {\r\n          before(element, store(sortableElement).placeholder)\r\n        }\r\n        // get placeholders from all stores & remove all but current one\r\n        Array.from(stores.values())\r\n          // remove empty values\r\n          .filter(data => data.placeholder !== undefined)\r\n          // foreach placeholder in array if outside of current sorableContainer -> remove from DOM\r\n          .forEach((data) => {\r\n            if (data.placeholder !== store(sortableElement).placeholder) {\r\n              data.placeholder.remove()\r\n            }\r\n          })\r\n      } else {\r\n        // get all placeholders from store\r\n        const placeholders = Array.from(stores.values())\r\n          .filter((data) => data.placeholder !== undefined)\r\n          .map((data) => {\r\n            return data.placeholder\r\n          })\r\n        // check if element is not in placeholders\r\n        if (placeholders.indexOf(element) === -1 && sortableElement === element && !filter(element.children, options.items).length) {\r\n          placeholders.forEach((element) => element.remove())\r\n          element.appendChild(store(sortableElement).placeholder)\r\n        }\r\n      }\r\n    }, options.debounce)\r\n    // Handle dragover and dragenter events on draggable items\r\n    const onDragOverEnter = function (e) {\r\n      let element = e.target\r\n      const sortableElement = element.isSortable === true ? element : findSortable(element, e)\r\n      element = findDragElement(sortableElement, element)\r\n      if (!dragging || !listsConnected(sortableElement, dragging.parentElement) || data(sortableElement, '_disabled') === 'true') {\r\n        return\r\n      }\r\n      const options = data(sortableElement, 'opts')\r\n      if (parseInt(options.maxItems) && filter(sortableElement.children, data(sortableElement, 'items')).length >= parseInt(options.maxItems) && dragging.parentElement !== sortableElement) {\r\n        return\r\n      }\r\n      e.preventDefault()\r\n      e.stopPropagation()\r\n      e.dataTransfer.dropEffect = store(sortableElement).getConfig('copy') === true ? 'copy' : 'move'\r\n      debouncedDragOverEnter(sortableElement, element, e.pageX, e.pageY)\r\n    }\r\n\r\n    on(listItems.concat(sortableElement), 'dragover', onDragOverEnter)\r\n    on(listItems.concat(sortableElement), 'dragenter', onDragOverEnter)\r\n  })\r\n\r\n  return sortableElements\r\n}\r\n\r\nsortable.destroy = function (sortableElement) {\r\n  destroySortable(sortableElement)\r\n}\r\n\r\nsortable.enable = function (sortableElement) {\r\n  enableSortable(sortableElement)\r\n}\r\n\r\nsortable.disable = function (sortableElement) {\r\n  disableSortable(sortableElement)\r\n}\r\n\r\n/* START.TESTS_ONLY */\r\nsortable.__testing = {\r\n  // add internal methods here for testing purposes\r\n  data,\r\n  removeItemEvents,\r\n  removeItemData,\r\n  removeSortableData,\r\n  removeContainerEvents\r\n}\r\n/* END.TESTS_ONLY */\r\n","/**\r\n * make sure a function is only called once within the given amount of time\r\n * @param {Function} fn the function to throttle\r\n * @param {number} threshold time limit for throttling\r\n */\r\n// must use function to keep this context\r\nexport default function (fn: Function, threshold: number = 250) {\r\n  // check function\r\n  if (typeof fn !== 'function') {\r\n    throw new Error('You must provide a function as the first argument for throttle.')\r\n  }\r\n  // check threshold\r\n  if (typeof threshold !== 'number') {\r\n    throw new Error('You must provide a number as the second argument for throttle.')\r\n  }\r\n\r\n  let lastEventTimestamp = null\r\n\r\n  return (...args) => {\r\n    const now = Date.now()\r\n    if (lastEventTimestamp === null || now - lastEventTimestamp >= threshold) {\r\n      lastEventTimestamp = now\r\n      fn.apply(this, args)\r\n    }\r\n  }\r\n}\r\n"],"names":["addData","element","key","value","undefined","h5s","data","filter","nodes","selector","NodeList","HTMLCollection","Array","Error","from","item","nodeType","matches","stores","Map","Store","this","_config","_placeholder","_data","Object","defineProperty","prototype","get","config","forEach","set","mergedConfig","assign","entries","setConfig","has","getConfig","placeholder","HTMLElement","setData","getData","deleteData","delete","store","sortableElement","addEventListener","eventName","callback","i","length","concat","removeEventListener","addAttribute","attribute","setAttribute","removeAttribute","offset","parentElement","getClientRects","rect","left","window","pageXOffset","right","top","pageYOffset","bottom","debounce","func","wait","timeout","args","_i","arguments","clearTimeout","setTimeout","apply","getIndex","elementList","indexOf","isInDom","parentNode","insertNode","referenceNode","newElement","position","insertBefore","nextElementSibling","target","insertAfter","serialize","sortableContainer","customItemSerializer","customContainerSerializer","serializedItem","serializedContainer","isSortable","items","children","serializedItems","map","parent","node","html","outerHTML","index","container","itemCount","makePlaceholder","placeholderClass","includes","tagName","document","createElement","innerHTML","_a","classList","add","split","getElementHeight","style","getComputedStyle","getPropertyValue","parseInt","int","isNaN","reduce","sum","getElementWidth","getHandles","querySelector","shadowRoot","getEventTarget","event","composedPath","defaultDragImage","draggedElement","elementOffset","posX","pageX","posY","pageY","setDragImage","customDragImage","Event","dataTransfer","dragImage","effectAllowed","id","listsConnected","destination","origin","acceptFrom","sel","defaultConfiguration","connectWith","disableIEFix","copy","draggingClass","hoverClass","dropTargetContainerClass","throttleTime","maxItems","itemSerializer","containerSerializer","orientation","dragging","draggingHeight","draggingWidth","originContainer","originIndex","originElementIndex","originItemsBeforeUpdate","previousContainer","destinationItemsBeforeUpdate","enableHoverClass","enable","hoverClasses_1","fn","threshold","_this","lastEventTimestamp","now","Date","throttle","buttons","contains","_b","remove","removeItemEvents","off","removeStoreData","removeContainerEvents","getDragging","draggedItem","sortable","ditem","allowDuplicates","verifyDragItemExists","attr","cloneNode","appendChild","display","oldDisplay","removeSortableData","removeAttr","removeItemData","findSortable","find","el","findDragElement","options","itemlist","ele","enableSortable","opts","handles","handle","dragDrop","on","reloadSortable","sortableElements","method","String","querySelectorAll","slice","call","test","configKey","hasOwnProperty","console","warn","customPlaceholder","listItems","tempContainer","e","stopImmediatePropagation","getAttribute","dragItem","dispatchEvent","CustomEvent","detail","elementIndex","originalTarget","itemsBeforeUpdate","outTarget","relatedTarget","fromElement","currentTarget","visiblePlaceholder","values","preventDefault","stopPropagation","replaceWith","originItems","destinationContainer","destinationItems","destinationElementIndex","destinationIndex","debouncedDragOverEnter","forcePlaceholderSize","height","width","thisHeight","thisWidth","placeholderIndex","thisIndex","deadZoneVertical","deadZoneHorizontal","offsetTop","offsetLeft","placeAfter","elementMiddleVertical","offsetHeight","elementMiddleHorizontal","offsetWidth","after","before","placeholders","onDragOverEnter","dropEffect","destroy","disable","__testing"],"mappings":"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"}